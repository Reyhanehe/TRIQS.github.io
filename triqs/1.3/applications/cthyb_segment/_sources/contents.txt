
.. module:: pytriqs.applications.impurity_solvers.cthyb_segment

.. _documentation:

Reference documentation
=========================

The 'cthyb-segment' solver is a continuous-time Quantum Monte Carlo solver aimed at solving an :doc:`Anderson impurity model <definitions>` with static and dynamical density-density interactions.

Below is a very short example demonstrating the basic usage of the solver:

.. runblock:: python

    from pytriqs.gf.local import *
    from pytriqs.operators import *
    from numpy import matrix

    # Set up a few parameters
    U = 2.0
    beta = 20.0
    mu = 0.2
    eps0 = 0.3
    V = 1.0

    # Construct the segment solver
    from pytriqs.applications.impurity_solvers.cthyb_segment import Solver
    S = Solver(beta = beta, gf_struct = {"up":[0],"down":[0]})

    # Interaction matrix
    h_int = U*n('up',0)*n('down',0)

    # Initialize the Green function
    for n,g in S.G0_iw:
      S.G0_iw[n] << inverse(iOmega_n + mu - V**2 * inverse(iOmega_n - eps0))

    S.solve(h_int=h_int,
     n_cycles  = 1000,
     length_cycle = 100,
     n_warmup_cycles = 5000,
     measure_nn = True,
     move_move = False,
     move_swap_empty_lines = False)
           
    print "nn = ", S.nn


After importing the solver class::

  from pytriqs.applications.impurity_solvers.cthyb_segment import Solver 

-  one declares and constructs a solver instance. Some construction parameters are mandatory, some others are optional(:doc:`full list here <options>`).

.. code-block:: python

	 S = Solver(beta = beta, gf_struct = {"up":[0],"down":[0]})
 
-  one then specifies the inputs of the solver (:doc:`full list here <accessors>`)

.. code-block:: python

  for n,g in S.G0_iw:
   S.G0_iw[n] << inverse(iOmega_n + mu - V**2 * inverse(iOmega_n - eps0))
 
  
-  one then calls the solve() method. This method comes with mandatory and optional parameters (:doc:`full list here <options>`).

.. code-block:: python

  S.solve(h_int = h_int,
          n_cycles  = 100000,
          ...)

-  finally, one accesses and prints the result of the measure (:doc:`full list here <accessors>`).
 
.. code-block:: python

   print "nn = ", S.nn
   

To know more about the solver, visit one of the following pages:

.. toctree::
   :maxdepth: 1

   definitions
   options
   accessors
   observables
   provenance
   
