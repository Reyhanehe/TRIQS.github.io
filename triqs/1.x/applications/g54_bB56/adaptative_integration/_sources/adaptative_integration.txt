
Adaptative integration
----------------------

This library computes the integral :math:`I` of a function

.. math:: f:\mathbb{R}^d \rightarrow \mathbb{C}/\mathbb{R}

with :math:`d=1,2,3` on a :math:`d`\ -dimensional simplex :math:`S` :

.. math:: I \equiv  \int_S d^d x f(x) 

This is done iteratively by splitting the simplex :math:`S` in smaller
simplices until the sum of the integrals on the small simplices is close
enough to the integral on the larger simplex. In other words, the
algorithm stops when the integration mesh (composed of the smaller and
smaller simplices) is refined enough for the desired precision.

The algorithm is the following:

-  initialize a map :math:`M` containing :math:`S` and its weight
   :math:`w(S)` as a key. The weight measures the accuracy of
   integration of :math:`f` on a given triangle.

-  while the termination criterion is not attained, take the simplex
   with highest weight, split it into smaller simplices, and insert the
   latter into the map with their respective weights.

-  return the sum of the integral of :math:`f` on each simplex of the
   map

As can be seen, there are several choices to be made:

Termination criterion
~~~~~~~~~~~~~~~~~~~~~~~
 We have chosen the criterion:

   .. math:: \sum_{s\in M} w(s) < c 

   where :math:`c` is user-defined. The user also defines a maximum
   number of iterations :math:`n_{max}` to reach the desired precision.

Weight of a simplex :math:`s`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
We have chosen it to be the difference between the integral of :math:`f` on the simplex minus the
   sum of the integral of :math:`f` on its 'sons'.

Way of splitting a simplex
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
It is optional and user-defined. We provide several  :doc:`splitters <splitters>`.

Integration method on a given simplex
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
It is also optional and user-defined. We provide several :doc:`integrators <gaussian_integration>`.


.. toctree::

  gaussian_integration
  splitters
    
