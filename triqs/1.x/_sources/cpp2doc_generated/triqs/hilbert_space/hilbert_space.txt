..
   Generated automatically using the command:
   c++2doc.py -N triqs /var/lib/jenkins/jobs/triqs_master/workspace/triqs_src/doc/reference/doc_root.hpp --output_directory=/var/lib/jenkins/jobs/triqs_master/workspace/build/doc/cpp2doc_generated --includes=/var/lib/jenkins/jobs/triqs_master/workspace/triqs_src/ --includes=/var/lib/jenkins/jobs/triqs_master/workspace/build/Config --compiler_options=-DTRIQS_BUILDING_LIBRARY --mako_location=/var/lib/jenkins/jobs/triqs_master/workspace/triqs_src/tools/

.. highlight:: c

.. code-block:: c

    #include <triqs/hilbert_space/hilbert_space.hpp>

.. _hilbert_space:

hilbert_space
===============

**Synopsis**:

.. code-block:: c

      class hilbert_space;

A Hilbert space spanned from *all* fermionic Fock states generated by a given set of fundamental operators.







Member functions
-----------------

+--------------------------------------------------------+--------------------------------------------------------------------+
| Member function                                        | Comment                                                            |
+========================================================+====================================================================+
| :ref:`constructor <hilbert_space_constructor>`         | Construct a dummy Hilbert space of zero size                       |
+--------------------------------------------------------+--------------------------------------------------------------------+
| :ref:`size <hilbert_space_size>`                       | Return the total number of the fermionic Fock states in this space |
+--------------------------------------------------------+--------------------------------------------------------------------+
| :ref:`operator== != <hilbert_space_operator== !=>`     | Check two Hilbert spaces for equality                              |
+--------------------------------------------------------+--------------------------------------------------------------------+
| :ref:`has_state <hilbert_space_has_state>`             | Check if a given Fock state belongs to this space                  |
+--------------------------------------------------------+--------------------------------------------------------------------+
| :ref:`get_state_index <hilbert_space_get_state_index>` | Find the index of a given Fock state within this space             |
+--------------------------------------------------------+--------------------------------------------------------------------+
| :ref:`get_fock_state <hilbert_space_get_fock_state>`   | Return the `i`-th basis element as a Fock state                    |
+--------------------------------------------------------+--------------------------------------------------------------------+

.. toctree::
  :hidden:

   hilbert_space/constructor
   hilbert_space/size
   hilbert_space/operator== !=
   hilbert_space/has_state
   hilbert_space/get_state_index
   hilbert_space/get_fock_state