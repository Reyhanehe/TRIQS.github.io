..
   Generated automatically using the command :
   c++2doc.py -N triqs /mnt/home/wentzell/Dropbox/Coding/triqs_1.4/doc/reference/doc_root.hpp --output_directory=/mnt/home/wentzell/Dropbox/Coding/triqs_1.4/build/doc/cpp2doc_generated --includes=/mnt/home/wentzell/Dropbox/Coding/triqs_1.4/ --includes=/mnt/home/wentzell/Dropbox/Coding/triqs_1.4/build/Config --compiler_options=-DTRIQS_BUILDING_LIBRARY --mako_location=/mnt/home/wentzell/Dropbox/Coding/triqs_1.4/tools/
   /mnt/home/wentzell/Dropbox/Coding/triqs_1.4/triqs/./gfs/./meshes/matsubara_freq.hpp

.. highlight:: c


.. _gf_mesh<imfreq>_constructor:

constructor
=============

**Synopsis**:

.. code-block:: c

    gf_mesh<imfreq> (triqs::gfs::gf_mesh<triqs::gfs::imfreq>::domain_t dom, long n_pts,
   triqs::gfs::matsubara_mesh_opt opt) ;     (1)

    gf_mesh<imfreq> () ;                                                                                                              (2)

    gf_mesh<imfreq> (double beta, triqs::gfs::statistic_enum S, long n_pts,
   triqs::gfs::matsubara_mesh_opt opt) ;                 (3)


---------------------------------------



(1) constructor

 Full constructor



Parameters
-------------


   * **dom**: domain




   * **n_pts**: defined as n_pts = n_max + 1 (n_max: last matsubara index)




   * **matsubara_mesh_opt**: tells whether the mesh is defined for all frequencies or only for positive frequencies






---------------------------------------



(2) default constructor






---------------------------------------



(3) constructor

 Full constructor



Parameters
-------------


   * **beta**: inverse temperature




   * **S**: statistic (Fermion or Boson)




   * **n_pts**: defined as n_pts = n_max + 1 (n_max: last matsubara index)




   * **matsubara_mesh_opt**: tells whether the mesh is defined for all frequencies or only for positive frequencies