..
   Generated automatically using the command:
   c++2doc.py -N triqs /mnt/home/wentzell/Dropbox/Coding/triqs_1.4/doc/reference/doc_root.hpp --output_directory=/mnt/home/wentzell/Dropbox/Coding/triqs_1.4/build/doc/cpp2doc_generated --includes=/mnt/home/wentzell/Dropbox/Coding/triqs_1.4/ --includes=/mnt/home/wentzell/Dropbox/Coding/triqs_1.4/build/Config --compiler_options=-DTRIQS_BUILDING_LIBRARY --mako_location=/mnt/home/wentzell/Dropbox/Coding/triqs_1.4/tools/

.. highlight:: c

.. code-block:: c

    #include <triqs/hilbert_space/state.hpp>

.. _state:

state
=======

**Synopsis**:

.. code-block:: c

     template<typename HilbertSpace, typename ScalarType, bool BasedOnMap> class state;

Many-body state as a list of amplitudes in a *basis of Fock states*

  The amplitudes can either be stored using a map (only non-vanishing elements are stored)
  or in a `triqs::arrays::vector`. In order to make this class model :ref:`statevector_concept`
  free function :ref:`make_zero_state` is defined. Specializations on `BasedOnMap` provide
  different extensions of the concept, and are documented separately:

  - :ref:`state, map-based storage <state\<HilbertSpace,ScalarType,true\>>`
  - :ref:`state, vector-based storage <state\<HilbertSpace,ScalarType,false\>>`

  Function :ref:`project` can be used to project a state from one Hilbert space to another Hilbert space/subspace.





Template parameters
----------------------

   * **HilbertSpace**: Hilbert space type, one of :ref:`hilbert_space` and :ref:`sub_hilbert_space`

   * **ScalarType**: Amplitude type, normally `double` or `std::complex<double>`

   * **BasedOnMap**: Use the implementation based on a map