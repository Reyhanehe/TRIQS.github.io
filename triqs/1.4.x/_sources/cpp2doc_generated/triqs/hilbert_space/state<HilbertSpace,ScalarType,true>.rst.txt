..
   Generated automatically using the command:
   c++2doc.py -N triqs /mnt/home/wentzell/Dropbox/Coding/triqs_1.4/doc/reference/doc_root.hpp --output_directory=/mnt/home/wentzell/Dropbox/Coding/triqs_1.4/build/doc/cpp2doc_generated --includes=/mnt/home/wentzell/Dropbox/Coding/triqs_1.4/ --includes=/mnt/home/wentzell/Dropbox/Coding/triqs_1.4/build/Config --compiler_options=-DTRIQS_BUILDING_LIBRARY --mako_location=/mnt/home/wentzell/Dropbox/Coding/triqs_1.4/tools/

.. highlight:: c

.. code-block:: c

    #include <triqs/hilbert_space/state.hpp>

.. _state<HilbertSpace,ScalarType,true>:

state<HilbertSpace,ScalarType,true>
=====================================

**Synopsis**:

.. code-block:: c

     template<typename HilbertSpace, typename ScalarType> class state<HilbertSpace,ScalarType,true>;

State: implementation based on a map

  This specialization can work well on huge Hilbert spaces, as long as there are not
  too many non-vanishing amplitudes  in the state.





Template parameters
----------------------

   * **HilbertSpace**: Hilbert space type, one of :ref:`hilbert_space` and :ref:`sub_hilbert_space`

   * **ScalarType**: Amplitude type, normally `double` or `std::complex<double>`



Member types
-----------------

+-----------------+-----------------------------------------------+
| Member type     | Comment                                       |
+=================+===============================================+
| value_type      | Accessor to `ScalarType` template parameter   |
+-----------------+-----------------------------------------------+
| hilbert_space_t | Accessor to `HilbertSpace` template parameter |
+-----------------+-----------------------------------------------+

Member functions
-----------------

+----------------------------------------------------------------------------------------+-------------------------------------------------------------+
| Member function                                                                        | Comment                                                     |
+========================================================================================+=============================================================+
| :ref:`constructor <state\<HilbertSpace,ScalarType,true\>_constructor>`                 | Construct a new state object                                |
+----------------------------------------------------------------------------------------+-------------------------------------------------------------+
| :ref:`size <state\<HilbertSpace,ScalarType,true\>_size>`                               | Return the dimension of the associated Hilbert space        |
+----------------------------------------------------------------------------------------+-------------------------------------------------------------+
| :ref:`operator() <state\<HilbertSpace,ScalarType,true\>_operator()>`                   | Access to individual amplitudes                             |
+----------------------------------------------------------------------------------------+-------------------------------------------------------------+
| :ref:`operator+= -= *= /= <state\<HilbertSpace,ScalarType,true\>_operator+= -= *= /=>` | In-place addition of another state                          |
+----------------------------------------------------------------------------------------+-------------------------------------------------------------+
| :ref:`get_hilbert <state\<HilbertSpace,ScalarType,true\>_get_hilbert>`                 | Return a constant reference to the associated Hilbert space |
+----------------------------------------------------------------------------------------+-------------------------------------------------------------+
| :ref:`set_hilbert <state\<HilbertSpace,ScalarType,true\>_set_hilbert>`                 | Reset the associated Hilbert space                          |
+----------------------------------------------------------------------------------------+-------------------------------------------------------------+

.. toctree::
  :hidden:

   state<HilbertSpace,ScalarType,true>/constructor
   state<HilbertSpace,ScalarType,true>/size
   state<HilbertSpace,ScalarType,true>/operator()
   state<HilbertSpace,ScalarType,true>/operator+= -= *= /=
   state<HilbertSpace,ScalarType,true>/get_hilbert
   state<HilbertSpace,ScalarType,true>/set_hilbert