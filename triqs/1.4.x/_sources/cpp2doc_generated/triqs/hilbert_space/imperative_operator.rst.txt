..
   Generated automatically using the command:
   c++2doc.py -N triqs /mnt/home/wentzell/Dropbox/Coding/triqs_1.4/doc/reference/doc_root.hpp --output_directory=/mnt/home/wentzell/Dropbox/Coding/triqs_1.4/build/doc/cpp2doc_generated --includes=/mnt/home/wentzell/Dropbox/Coding/triqs_1.4/ --includes=/mnt/home/wentzell/Dropbox/Coding/triqs_1.4/build/Config --compiler_options=-DTRIQS_BUILDING_LIBRARY --mako_location=/mnt/home/wentzell/Dropbox/Coding/triqs_1.4/tools/

.. highlight:: c

.. code-block:: c

    #include <triqs/hilbert_space/imperative_operator.hpp>

.. _imperative_operator:

imperative_operator
=====================

**Synopsis**:

.. code-block:: c

     template<typename HilbertType, typename ScalarType, bool UseMap> class imperative_operator;

This class is the imperative version of the :ref:`many_body_operator`

  It is created from a `many_body_operator` object, and is used to act on a :ref:`state`.
  There is an optimization option `UseMap` (useful when `HilbertType = sub_hilbert_space`),
  which allows the user to give a map describing the connections between Hilbert subspaces generated by this operator.



.. note::
     `HilbertType = sub_hilbert_space` implies that the operator generates only one-to-one connections between the used subspaces. If this not the case, one has to use `HilbertType = hilbert_space`.



Template parameters
----------------------

   * **HilbertType**: Hilbert space type, one of :ref:`hilbert_space` and :ref:`sub_hilbert_space`

   * **ScalarType**: Type of operator's coefficients, normally `double` or `std::complex<double>`

   * **UseMap**: Use a user-provided connection map on construction




Member functions
-----------------

+----------------------------------------------------------+--------------------------------------------------------------------------+
| Member function                                          | Comment                                                                  |
+==========================================================+==========================================================================+
| :ref:`constructor <imperative_operator_constructor>`     | Construct a zero operator                                                |
+----------------------------------------------------------+--------------------------------------------------------------------------+
| :ref:`update_coeffs <imperative_operator_update_coeffs>` | Apply a callable object to each coefficient of the operator by reference |
+----------------------------------------------------------+--------------------------------------------------------------------------+
| :ref:`operator() <imperative_operator_operator()>`       | Act on a state and return a new state                                    |
+----------------------------------------------------------+--------------------------------------------------------------------------+

.. toctree::
  :hidden:

   imperative_operator/constructor
   imperative_operator/update_coeffs
   imperative_operator/operator()