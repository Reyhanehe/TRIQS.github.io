..
   Generated automatically using the command :
   c++2doc.py -N triqs /mnt/home/wentzell/Dropbox/Coding/triqs_1.4/doc/reference/doc_root.hpp --output_directory=/mnt/home/wentzell/Dropbox/Coding/triqs_1.4/build/doc/cpp2doc_generated --includes=/mnt/home/wentzell/Dropbox/Coding/triqs_1.4/ --includes=/mnt/home/wentzell/Dropbox/Coding/triqs_1.4/build/Config --compiler_options=-DTRIQS_BUILDING_LIBRARY --mako_location=/mnt/home/wentzell/Dropbox/Coding/triqs_1.4/tools/
   /mnt/home/wentzell/Dropbox/Coding/triqs_1.4/triqs/operators/util/extractors.hpp

.. highlight:: c


.. _dict_to_matrix:

dict_to_matrix
================

**Synopsis**:

.. code-block:: c

    template<typename ValueType, typename DictType>
    array<ValueType, std::tuple_size<typename DictType::key_type>::value>
   dict_to_matrix (const DictType & dict, const hilbert_space::fundamental_operator_set &
   fs) ;


---------------------------------------


.. code-block:: c

    #include <triqs/operators/util/extractors.hpp>

..


 Convert dictionary of coefficients to matrix/tensor, given a fundamental operator set

 For a given dictionary `dict: (ind_1,ind_2,...,ind_N) -> x` returns an array of rank `N`
 with elements of type `ValueType`. Each key `(ind_1,ind_2,...,ind_N)` is mapped to a
 tuple of integers `(i_1,i_2,...,i_N)` using a given fundamental operator set `fs`.
 The element of the resulting array addressed by `(i_1,i_2,...,i_N)` is then set to `x`.
 The rest of elements, which have no corresponding keys in `dict`, are value-initialized
 (set to `ValueType{}`).

 An exception is thrown if some index `ind_n` is missing from `fs`.



Template parameters
-----------------------



   * **ValueType**: element type of the resulting matrix/tensor


   * **DictType**: type of the dictionary to convert



Parameters
-------------


   * **dict**: dictionary to convert




   * **fs**: fundamental operator set used for conversion





Return value
--------------

Matrix/tensor, result of conversion