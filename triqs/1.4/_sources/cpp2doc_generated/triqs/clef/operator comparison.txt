..
   Generated automatically using the command :
   c++2doc.py -N triqs /var/lib/jenkins/jobs/triqs_clang3.8/workspace/triqs_src/doc/reference/doc_root.hpp --output_directory=/var/lib/jenkins/jobs/triqs_clang3.8/workspace/build/doc/cpp2doc_generated --includes=/var/lib/jenkins/jobs/triqs_clang3.8/workspace/triqs_src/ --includes=/var/lib/jenkins/jobs/triqs_clang3.8/workspace/build/Config --compiler_options=-DTRIQS_BUILDING_LIBRARY --mako_location=/var/lib/jenkins/jobs/triqs_clang3.8/workspace/triqs_src/tools/
   /var/lib/jenkins/jobs/triqs_clang3.8/workspace/triqs_src/triqs/./clef/./clef.c14.hpp

.. highlight:: c


.. _operator comparison:

operator comparison
=====================

**Synopsis**:

.. code-block:: c

    template<typename L, typename R>                                                                                                                    (1)
    std14::enable_if_t<is_any_lazy<L, R>::value, expr<tags::greater,
   expr_storage_t<L>, expr_storage_t<R> > > operator> (L && l, R && r) const;

    template<typename L, typename R>                                                                                                                    (2)
    std14::enable_if_t<is_any_lazy<L, R>::value, expr<tags::less, expr_storage_t<L>,
   expr_storage_t<R> > > operator< (L && l, R && r) const;

    template<typename L, typename R>                                                                                                                    (3)
    std14::enable_if_t<is_any_lazy<L, R>::value, expr<tags::leq, expr_storage_t<L>,
   expr_storage_t<R> > > operator<= (L && l, R && r) const;

    template<typename L, typename R>                                                                                                                    (4)
    std14::enable_if_t<is_any_lazy<L, R>::value, expr<tags::geq, expr_storage_t<L>,
   expr_storage_t<R> > > operator>= (L && l, R && r) const;

    template<typename V1, typename V2>                                                                                                                  (5)
    std14::enable_if_t<ImmutableVector<V1>::value && ImmutableVector<V2>::value, bool>
   operator< (const V1 & a, const V2 & b) ;

    template<typename V1, typename V2>                                                                                                                  (6)
    std14::enable_if_t<ImmutableVector<V1>::value && ImmutableVector<V2>::value, bool>
   operator> (const V1 & a, const V2 & b) ;

    template<typename T>                                                                                                                                (7)
    bool operator< (const triqs::gfs::matsubara_freq & x, const T & y) ;

    template<typename T>                                                                                                                                (8)
    bool operator< (const T & x, const triqs::gfs::matsubara_freq & y) ;

    bool operator< (const triqs::gfs::matsubara_freq & x, const triqs::gfs::matsubara_freq
   & y) ;                                                   (9)

    template<typename T>                                                                                                                                (10)
    bool operator> (const triqs::gfs::matsubara_freq & x, const T & y) ;

    template<typename T>                                                                                                                                (11)
    bool operator> (const T & x, const triqs::gfs::matsubara_freq & y) ;

    bool operator> (const triqs::gfs::matsubara_freq & x, const triqs::gfs::matsubara_freq
   & y) ;                                                   (12)

    bool operator> (const triqs::utility::variant_int_string & x, const
   triqs::utility::variant_int_string & y) ;                                   (13)

    bool operator< (const monomial_t & m1, const monomial_t & m2) ;                                                                                     (14)


---------------------------------------


.. code-block:: c

    #include <None>

..


(1)






---------------------------------------


.. code-block:: c

    #include <None>

..


(2)






---------------------------------------


.. code-block:: c

    #include <None>

..


(3)






---------------------------------------


.. code-block:: c

    #include <None>

..


(4)






---------------------------------------


.. code-block:: c

    #include <None>

..


(5)






---------------------------------------


.. code-block:: c

    #include <None>

..


(6)






---------------------------------------


.. code-block:: c

    #include <None>

..


(7)






---------------------------------------


.. code-block:: c

    #include <None>

..


(8)






---------------------------------------


.. code-block:: c

    #include <None>

..


(9)






---------------------------------------


.. code-block:: c

    #include <None>

..


(10)






---------------------------------------


.. code-block:: c

    #include <None>

..


(11)






---------------------------------------


.. code-block:: c

    #include <None>

..


(12)






---------------------------------------


.. code-block:: c

    #include <None>

..


(13)






---------------------------------------


.. code-block:: c

    #include <None>

..


(14)