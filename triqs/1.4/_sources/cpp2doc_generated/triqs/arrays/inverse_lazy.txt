..
   Generated automatically using the command:
   c++2doc.py -N triqs /var/lib/jenkins/jobs/triqs_clang3.8/workspace/triqs_src/doc/reference/doc_root.hpp --output_directory=/var/lib/jenkins/jobs/triqs_clang3.8/workspace/build/doc/cpp2doc_generated --includes=/var/lib/jenkins/jobs/triqs_clang3.8/workspace/triqs_src/ --includes=/var/lib/jenkins/jobs/triqs_clang3.8/workspace/build/Config --compiler_options=-DTRIQS_BUILDING_LIBRARY --mako_location=/var/lib/jenkins/jobs/triqs_clang3.8/workspace/triqs_src/tools/

.. highlight:: c


.. _inverse_lazy:

inverse_lazy
==============

**Synopsis**:

.. code-block:: c

     template<typename A> class inverse_lazy;

Lazy result of inverse(M) where M can be :
  * a matrix, a matrix_view
  * any matrix expression
 The object is lazy, it does not do any computation.
 It can be copied at no cost
 It keeps view of the object A if it a matrix, a copy if it is a formal expression.







Member functions
-----------------

+-----------------------------------------------+---------+
| Member function                               | Comment |
+===============================================+=========+
| :ref:`constructor <inverse_lazy_constructor>` |         |
+-----------------------------------------------+---------+
| :ref:`domain <inverse_lazy_domain>`           |         |
+-----------------------------------------------+---------+
| :ref:`input <inverse_lazy_input>`             |         |
+-----------------------------------------------+---------+
| :ref:`operator() <inverse_lazy_operator()>`   |         |
+-----------------------------------------------+---------+

.. toctree::
  :hidden:

   inverse_lazy/constructor
   inverse_lazy/domain
   inverse_lazy/input
   inverse_lazy/operator()

Non Member functions
-----------------------

+-------------------------------+---------+
| Non member function           | Comment |
+===============================+=========+
| :ref:`<< <inverse_lazy_\<\<>` |         |
+-------------------------------+---------+

.. toctree::
  :hidden:

   inverse_lazy/<<