..
   Generated automatically using the command :
   c++2doc.py -N applications -N impurity_solvers /var/lib/jenkins/jobs/cthyb_spin_gcc5/workspace/triqs_src/doc/reference/common.hpp --output_directory=/var/lib/jenkins/jobs/cthyb_spin_gcc5/workspace/build/doc/reference --includes=/var/lib/jenkins/jobs/cthyb_spin_gcc5/workspace/triqs_src/c++ --includes=/var/lib/jenkins/jobs/triqs_gcc5/workspace/build/INSTALL_DIR/include --includes=/var/lib/jenkins/jobs/triqs_gcc5/workspace/build/INSTALL_DIR/share/triqs/cmake --mako_location=/var/lib/jenkins/jobs/triqs_gcc5/workspace/build/INSTALL_DIR/share/triqs
   /var/lib/jenkins/jobs/cthyb_spin_gcc5/workspace/triqs_src/doc/reference/../../c++/solver_core.hpp

.. highlight:: c


.. _solver_core_solve:

solve
=======

**Synopsis**:

.. code-block:: c

    void solve (const
   triqs::applications::impurity_solvers::ctqmc_seg::solve_parameters_t & p) ;


---------------------------------------



 solve method: starts the Metropolis algorithm

 Steps:

 - extract :math:`\Delta^\sigma_{ab}(\tau)` and :math:`\mu^\sigma_a` from :math:`\mathcal{G}^\sigma_{ab}(i\omega)`

 - if :math:`\mathcal{D}^{\sigma\sigma'}_{0,ab}(i\Omega)\neq 0`,  extract :math:`K(^{\sigma\sigma'}_{ab}\tau)` and :math:`\partial_\tau K^{\sigma\sigma'}_{ab}(\tau)` from :math:`\mathcal{D}^{\sigma\sigma'}_{0,ab}(i\Omega)`

 - if :math:`\mathcal{J}_{\perp,a}(i\Omega)\neq 0`,  extract :math:`\partial_\tau K_{\perp,a}(\tau)` from :math:`\mathcal{J}_{\perp,a}(i\Omega)`
 - add the moves and measures according to the parameters supplied by the user

 - start the Monte-Carlo simulation

 - finalize the Monte Carlo simulation