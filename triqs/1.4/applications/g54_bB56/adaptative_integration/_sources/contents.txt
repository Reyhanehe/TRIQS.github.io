Adaptative integration
#######################


This library allows one to integrate any function defined in 1d, 2d or 3d on a bounded domain.


Here is an example of use::



   #include <adaptative_integration/integration.hpp>
   #include <adaptative_integration/integration_worker.hpp>
   #include <adaptative_integration/simplex.hpp>
   #include <iostream>
   #include <iomanip>

   int main(){
   //integrator and splitter
   gauss_integrator_on_triangle I;
   rectangle_splitter S;

   //function f to be integrated
   double x1=.25, y1=.25,sx=.05,sy=0.05;
   auto f = [x1,y1,sx,sy](point2d p){return 1/(2*M_PI*sx*sy)*exp(-.5*(pow((p.x-x1)/sx,2)+pow((p.y-y1)/sy,2)));};

   //domain S of integration
   auto domain = std::vector<triangle>{triangle{point2d{0,0},point2d{1,0},point2d{0,1}}};

   //initialization of the adaptative integration worker
   auto W = integration_worker<triangle,gauss_integrator_on_triangle,rectangle_splitter,decltype(f(point2d{0.,0.}))>(I,S);

   //computation of the integral
   double precision = 1e-6;
   int n_iterations = 100;
   auto value = W.start(f,domain,precision,n_iterations);
   std::cout << std::setprecision(16) << "Integral is " << value << std::endl;
   }



.. toctree::

  adaptative_integration
  implementation_notes  
