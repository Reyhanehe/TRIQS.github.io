..
   Generated automatically using the command :
   c++2doc.py -N triqs -N applications -N selfconsistency common.hpp


.. _documentation:

Guided tour
=========================


.. runblock:: python

  from numpy import matrix, array
  from glattice_tools.tb_tools import *
  from pytriqs.utility import mpi
  from pytriqs.archive import *
  from selfconsistency.selfconsistency_worker import SelfconsistencyWorker

  #build a self consistency worker.
  U={'0':matrix([[1.0]])}
  filling=0.5


  sc_worker = SelfconsistencyWorker(
              U = U,                      #matrix U^A_{ab}, \frac{1}{2} U^{A}_{ab} n^A_a n^A_b
              n_tau=500,                  #number of imaginary time points
              n_iw=200,                   #number of matsubara freqs
              n_k=5,                      #number of linear k points
              beta=1.0,                   #inverse temperature
              lattice="square_nosym",     #lattice name 
              wigner_seitz=False,         #whether to use a Wigner-Seitz cell
              fermionic_struct={"up":[0]}, #block structure of fermions U,uv
              bosonic_struct={"0":[0]},   #block structure of bosons A, ab
              t={'up': TbDict(nn=0.25,nnn=0.0)},  #dict of tightbinding params for epsilon^U_{uv}
              V={'0': TbDict(nn=0.0)},    #dict of tightbinding params for v^A_{ab}
              coupling={'up|0':array([[[1.0]]])},  #lambda^{UA}_{uva}
      )

  #now set the local self-energy.
  sc_worker.Sigma_loc << U['0'][0,0]*filling

  #compute the approximate lattice self-energy (here $Sigma(k,i\omega)=Sigma(i\omega)$)
  sc_worker.fermionic_self_energy_approx(approximation="DMFT") 

  #now perform Dyson equation $G(k,i\omega) = 1/(i\omega + \mu - \epsilon(k) - $Sigma(k,i\omega)$
  #by default also adjust chemical potential to filling
  sc_worker.fermionic_dyson(filling=filling)

  mu_expect=U['0'][0,0]/2.
  diff=abs(sc_worker.mu[0][0,0]-mu_expect)
  assert diff<1e-12, "not ok: %s"%diff

  #compute the fermionic weiss field $\mathcal{G} = (G_loc^{-1} - \Sigma_loc)$
  sc_worker.fermionic_weiss_field(dos_file="")

  A=HDFArchive("store.h5", 'a')
  A['G_weiss']=sc_worker.G_weiss
  A['Sigma']=sc_worker.Sigma
  del A


The full reference documentation is to be found here :ref:`selfconsistency_ref`.


