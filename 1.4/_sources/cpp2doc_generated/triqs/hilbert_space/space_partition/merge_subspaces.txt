..
   Generated automatically using the command :
   c++2doc.py -N triqs /var/lib/jenkins/jobs/triqs_clang3.8/workspace/triqs_src/doc/reference/doc_root.hpp --output_directory=/var/lib/jenkins/jobs/triqs_clang3.8/workspace/build/doc/cpp2doc_generated --includes=/var/lib/jenkins/jobs/triqs_clang3.8/workspace/triqs_src/ --includes=/var/lib/jenkins/jobs/triqs_clang3.8/workspace/build/Config --compiler_options=-DTRIQS_BUILDING_LIBRARY --mako_location=/var/lib/jenkins/jobs/triqs_clang3.8/workspace/triqs_src/tools/
   /var/lib/jenkins/jobs/triqs_clang3.8/workspace/triqs_src/triqs/hilbert_space/space_partition.hpp

.. highlight:: c


.. _space_partition_merge_subspaces:

merge_subspaces
=================

**Synopsis**:

.. code-block:: c

    std::pair<matrix_element_map_t, matrix_element_map_t> merge_subspaces (const
   operator_t & Cd, const operator_t & C, bool store_matrix_elements = true) ;


---------------------------------------



 Perform Phase II of the automatic partition algorithm

   Merge some of the invariant subspaces together, to ensure that a given operator `Cd`
   and its Hermitian conjugate `C` generate only one-to-one connections between the subspaces.



Parameters
-------------


   * **Cd**: Subject operator `Cd`, normally a creation operator




   * **C**: Conjugate of `Cd`, normally an annihilation operator




   * **store_matrix_elements**: Should we store the non-vanishing matrix elements of `Cd`?





Return value
--------------

Non-vanishing matrix elements of `Cd` and `C`, if `store_matrix_elements = true`