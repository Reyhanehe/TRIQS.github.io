..
   Generated automatically using the command:
   c++2doc.py -N triqs /var/lib/jenkins/jobs/triqs_clang3.8/workspace/triqs_src/doc/reference/doc_root.hpp --output_directory=/var/lib/jenkins/jobs/triqs_clang3.8/workspace/build/doc/cpp2doc_generated --includes=/var/lib/jenkins/jobs/triqs_clang3.8/workspace/triqs_src/ --includes=/var/lib/jenkins/jobs/triqs_clang3.8/workspace/build/Config --compiler_options=-DTRIQS_BUILDING_LIBRARY --mako_location=/var/lib/jenkins/jobs/triqs_clang3.8/workspace/triqs_src/tools/

.. highlight:: c


.. _mem_block:

mem_block
===========

**Synopsis**:

.. code-block:: c

     template<typename ValueType> class mem_block;

This is a block of memory (pointer p and size size_).
  INTERNAL USE only, by shared_block only

  The memory can be :

   - allocated (and deleted in C++)
   - owned by a numpy python object (py_numpy)

  The block contains its own reference system, to avoid the use of shared_ptr in shared_block
  (which was very slow in critical codes).

  In addition, the python guard system can return to python an array allocated in C++.

  The memory block has 4 possible states (and only 4) :

  * State 0) :  p ==nullptr && py_numpy == nullptr && py_guard == nullptr
    Default state. Also obtained when the object has been moved from

  * State 1) : p !=nullptr && py_numpy == nullptr && py_guard == nullptr
    Memory block allocated and used in C++.

  * State 2) :  p !=nullptr && py_numpy != nullptr && py_guard == nullptr
    Memory block was allocated by python, and is used in C++.
    The block keeps a python ref (owned!) in py_numpy which is released at destruction

  * State 3) :  p !=nullptr && py_numpy == nullptr && py_guard != nullptr
    Memory block allocated by C++, but passed to python.
    The guard is an owned reference to a python object, which itself owns a c++ reference to the mem_block
    When the python is done with this object, it releases this reference and the mem_block
    can be destroyed (when nobody else uses it).
    This guarantees that :
       * as long as python does not clean the guard (which is then later attached to a numpy array, cf numpy interface)
         the block will not be deleted.
       * when python is done with this numpy, hence the guard, the c++ reference is dec_refed and
         the usage can continue normally in c++ (without *any* python ref contrary to a previous design).

  * Invariants :
    * py_numpy == nullptr || py_guard == nullptr :
    * ref_count >=1.





Public members
-----------------

+----------------+-----------------------+---------+
| Member         | Type                  | Comment |
+================+=======================+=========+
| size_          | size_t                |         |
+----------------+-----------------------+---------+
| p              | ValueType *__restrict |         |
+----------------+-----------------------+---------+
| ref_count      | size_t                |         |
+----------------+-----------------------+---------+
| weak_ref_count | size_t                |         |
+----------------+-----------------------+---------+
| py_numpy       | PyObject *            |         |
+----------------+-----------------------+---------+
| py_guard       | PyObject *            |         |
+----------------+-----------------------+---------+


Member functions
-----------------

+------------------------------------------------------------+---------+
| Member function                                            | Comment |
+============================================================+=========+
| :ref:`constructor <mem_block_constructor>`                 |         |
+------------------------------------------------------------+---------+
| :ref:`import_numpy_array <mem_block_import_numpy_array>`   |         |
+------------------------------------------------------------+---------+
| :ref:`operator= <mem_block_operator=>`                     |         |
+------------------------------------------------------------+---------+
| :ref:`copy_from <mem_block_copy_from>`                     |         |
+------------------------------------------------------------+---------+
| :ref:`delete_python_guard <mem_block_delete_python_guard>` |         |
+------------------------------------------------------------+---------+
| :ref:`new_python_ref <mem_block_new_python_ref>`           |         |
+------------------------------------------------------------+---------+
| :ref:`operator[] <mem_block_operator[]>`                   |         |
+------------------------------------------------------------+---------+
| :ref:`size <mem_block_size>`                               |         |
+------------------------------------------------------------+---------+
| :ref:`is_unique <mem_block_is_unique>`                     |         |
+------------------------------------------------------------+---------+
| :ref:`save <mem_block_save>`                               |         |
+------------------------------------------------------------+---------+
| :ref:`load <mem_block_load>`                               |         |
+------------------------------------------------------------+---------+
| :ref:`serialize <mem_block_serialize>`                     |         |
+------------------------------------------------------------+---------+

.. toctree::
  :hidden:

   mem_block/constructor
   mem_block/import_numpy_array
   mem_block/operator=
   mem_block/copy_from
   mem_block/delete_python_guard
   mem_block/new_python_ref
   mem_block/operator[]
   mem_block/size
   mem_block/is_unique
   mem_block/save
   mem_block/load
   mem_block/serialize