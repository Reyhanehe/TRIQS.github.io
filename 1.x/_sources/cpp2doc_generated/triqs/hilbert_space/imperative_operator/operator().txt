..
   Generated automatically using the command :
   c++2doc.py -N triqs /var/lib/jenkins/jobs/triqs_master/workspace/triqs_src/doc/reference/doc_root.hpp --output_directory=/var/lib/jenkins/jobs/triqs_master/workspace/build/doc/cpp2doc_generated --includes=/var/lib/jenkins/jobs/triqs_master/workspace/triqs_src/ --includes=/var/lib/jenkins/jobs/triqs_master/workspace/build/Config --compiler_options=-DTRIQS_BUILDING_LIBRARY --mako_location=/var/lib/jenkins/jobs/triqs_master/workspace/triqs_src/tools/
   /var/lib/jenkins/jobs/triqs_master/workspace/triqs_src/triqs/hilbert_space/imperative_operator.hpp

.. highlight:: c


.. _imperative_operator_operator():

operator()
============

**Synopsis**:

.. code-block:: c

    template<typename StateType, typename Args>
    StateType operator() (const StateType & st, Args &&... args) const;


---------------------------------------



 Act on a state and return a new state

   The optional extra arguments `args...` are forwarded to the coefficients of the operator.

   `auto psi = op(phi,args...);`

   We apply an operator obtained from `op` by replacing its monomial coefficients with values
   returned by `coeff(args...)`. This feature makes sense only for ScalarType being a callable object.



Template parameters
-----------------------



   * **StateType**: Type of the initial state


   * **Args**: Types of the optional arguments



Parameters
-------------


   * **st**: Initial state




   * **args**: Optional argument pack passed to each coefficient of the operator