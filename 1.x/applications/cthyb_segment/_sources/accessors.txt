.. module:: cthyb_segment

.. _accessors:

Solver Accessors
===========================


Instances of the class Solver have a number of accessors, some of which are used as inputs to the calculation, some of which are used to retrieve the outputs of the calculation. 

Input accessors
----------------
The input accessors are the following:

    +-------------+---------------------------------------------------------------+-----------------+
    | Member      | Description                                                   | Type            |
    +=============+===============================================================+=================+
    | G0_iw       | Bare Green's function                                         | BlockGfImFreq   |
    +-------------+---------------------------------------------------------------+-----------------+
    | D0_iw       | Retarded interaction                                          | GfImFreq        |
    +-------------+---------------------------------------------------------------+-----------------+
   
For calculations with static interactions, only ``G0_iw`` is needed.

.. note::

	Internally, the solver extracts from ``G0_iw`` [and ``D0_iw``] four important quantities, namely ``Delta_tau`` and ``mu`` (the hybridization function and the chemical potential) [and ``K_tau`` and ``Kprime_tau`` (the retarded interaction kernel and its derivative)]. These are the actual inputs to the Monte-Carlo algorithm and as such, must be checked by the user in case of doubt. In particular, a ``G0_iw`` with wrong tails will yield a poor ``Delta_tau``. These observables can be accessed as follows:

	+------------+---------------+
	| Member     | Type          |
	+============+===============+
	| Delta_tau  | BlockGfImTime |
	+------------+---------------+
	| K_tau      | GfImTime      |
	+------------+---------------+
	| Kprime_tau | GfImTime      |
	+------------+---------------+


Output accessors
------------------

You will find the precise definition and more details about the output accessors in the :doc:`next subsection <observables>`. The following table is a summary of all possible (read-only) output accessors:

+---------------+---------------------------+-------------------+--------------+-----------------+
| Accessor name | Observable                | Switch            | Size         | Type            |
+===============+===========================+===================+==============+=================+
| G_tau         | :math:`G_a(\tau)`         | measure_gt        | n_tau_g      | BlockGfImTime   |
+---------------+---------------------------+-------------------+--------------+-----------------+
| F_tau         | :math:`F_a(\tau)`         | measure_ft        | n_tau_g      | BlockGfImTime   |
+---------------+---------------------------+-------------------+--------------+-----------------+
| nn_tau        | :math:`\chi_{ab}(\tau)`   | measure_nnt       | n_tau_nn     | GfImTime        |
+---------------+---------------------------+-------------------+--------------+-----------------+
| G_iw          | :math:`G_a(i\omega)`      | measure_gw        | n_w          | BlockGfImFreq   |
+---------------+---------------------------+-------------------+--------------+-----------------+
| F_iw          | :math:`F_a(i\omega)`      | measure_fw        | n_w          | BlockGfImFreq   |
+---------------+---------------------------+-------------------+--------------+-----------------+
| nn_iw         | :math:`\chi_{ab}(i\nu)`   | measure_nnw       | n_w_b_nn     | GfImFreq        |
+---------------+---------------------------+-------------------+--------------+-----------------+
| G_l           | :math:`G_a(l)`            | measure_gl        | n_legendre_g | BlockGfLegendre |
+---------------+---------------------------+-------------------+--------------+-----------------+
| F_l           | :math:`F_b(l)`            | measure_fl        | n_legendre_g | BlockGfLegendre |
+---------------+---------------------------+-------------------+--------------+-----------------+
| nn            | :math:`\langle nn\rangle` | measure_nn        | --           | numpy.array     |
+---------------+---------------------------+-------------------+--------------+-----------------+
| hist          | :math:`\langle k\rangle`  | measure_hist      | 500          | numpy.array     |
+---------------+---------------------------+-------------------+--------------+-----------------+
| state_hist    | state histogram           | measure_statehist | --           | numpy.array     |
+---------------+---------------------------+-------------------+--------------+-----------------+

The following more complex quantities are automatically written to file:

+---------------------------------------------+----------------------------------------------------------------------+-------------------------------------------+---------------+------------------+
| Observable                                  | Switch                                                               | Size                                      | Accessor name | File name        |
+=============================================+======================================================================+===========================================+===============+==================+
| :math:`G^{(2)}_{a}(i\omega,i\nu)`           | measure_g2w                                                          | n_w_f_vertex, n_w_b_vertex                | G2_omega      | g2w.h5           |
+---------------------------------------------+----------------------------------------------------------------------+-------------------------------------------+---------------+------------------+
| :math:`F^{(2)}_{a}(i\omega,i\nu)`           | measure_f2w                                                          | n_w_f_vertex, n_w_b_vertex                | F2_omega      | f2w.h5           |
+---------------------------------------------+----------------------------------------------------------------------+-------------------------------------------+---------------+------------------+
| :math:`\lambda_{a}(i\omega,i\nu)`           | measure_g2w or measure_f2w, measure_gw, measure_nnw, evaluate_vertex | n_w_f_vertex, n_w_b_vertex, n_w, n_w_b_nn | lambda_omega  | lambda_charge.h5 |
+---------------------------------------------+----------------------------------------------------------------------+-------------------------------------------+---------------+------------------+
| :math:`G^{(3)}_{ab}(i\omega,i\omega',i\nu)` | measure_g3w                                                          | n_w_f_vertex, n_w_b_vertex                | G3_omega      | g3w.h5           |
+---------------------------------------------+----------------------------------------------------------------------+-------------------------------------------+---------------+------------------+
| :math:`F^{(3)}_{ab}(i\omega,i\omega',i\nu)` | measure_f3w                                                          | n_w_f_vertex, n_w_b_vertex                | F3_omega      | f3w.h5           |
+---------------------------------------------+----------------------------------------------------------------------+-------------------------------------------+---------------+------------------+
| :math:`\gamma_{ab}(i\omega,i\omega',i\nu)`  | measure_g3w or measure_g3w, measure_gw, evaluate_vertex              | n_w_f_vertex, n_w_b_vertex, n_w           | gamma_omega   | gammaw.h5        |
+---------------------------------------------+----------------------------------------------------------------------+-------------------------------------------+---------------+------------------+


