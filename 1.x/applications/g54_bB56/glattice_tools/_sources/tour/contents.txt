..
   Generated automatically using the command :
   c++2doc.py -N triqs -N applications common.hpp

.. _documentation:

A tour of the glattice_tools
==============================

Here is an example:

.. runblock:: python

   from numpy import matrix,array
   from pytriqs.gf.local import *
   from pytriqs.applications.glattice_tools.core import *
   from pytriqs.plot.mpl_interface import *
   from math import pi

   basis_vectors=array([[1.,0],[0.,1.]])
   symmetries=[[[1,0],[0,1]]]
   bz=BrillouinZone(basis_vectors,symmetries, [], False, True)
   bz_mesh=BzMesh(bz, 5)  #a BZ mesh with linear size 5

   print "size=",bz_mesh.size

   f=FctOnMeshBzMesh(bz_mesh, [1,1])

   #x,y,z,zmin,zmax=f.make_plottable()

   beta=1.0
   imfreq_mesh = MeshImFreq(beta,'Fermion', 10)

   mesh_prod2=MeshProductBzMeshImFreq(bz_mesh, imfreq_mesh)

   g_k_om = GlatticeBzMeshImFreq(mesh_prod2, [1,1])


   path=[[0,0],[pi,pi]]

   from pytriqs.archive import *
   A=HDFArchive("Glattice.output.h5",'a')
   A['f']=f
   A['G']=g_k_om
   del A

   A2=HDFArchive("Glattice.output.h5",'r')
   G2 = A2["G"]

   #oplot(G2.slice_at_const_k(0))

Look at 

- /test/python
- /test/c++

for more examples.

   
